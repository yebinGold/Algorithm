# 완전탐색
def solution(brown, yellow):
  total = brown + yellow
    
  for i in range(1, total+1):
      if total % i == 0 and i >= (total ** 0.5) and (i + total // i) * 2 == brown + 4:
        return [i, total // i]

"""
- 구해야 하는 값 = [카펫 가로 길이, 카펫 세로 길이]
- 갈색 격자의 수와 노란색 격자의 수를 안다는 것은 전체 격자의 수를 안다는 것이다.
- 전체 격자의 수 total == (가로 길이) * (세로 길이) 다.

1. 가로 길이와 세로 길이는 total의 약수 쌍이다.
  - 곱해서 total이 나와야 하기 때문에
2. for 반복문으로 total의 약수 쌍을 모두 구한다.
  - mod 연산으로 나눴을 때 나머지가 0인지 확인 
3. 각 약수 쌍이 카펫의 가로, 세로 길이가 될 수 있는지 검사한다.
  - 가로 길이 > 세로 길이이기 때문에 i는 total의 제곱근보다 크거나 같아야 한다.
  - 갈색 격자는 테투리 맨 바깥 1줄을 차지하기 때문에 (brown == 카펫 전체 둘레 길이)
  - i가 가로 길이라면 (total // i)는 세로 길이다.
  - (가로 길이 + 세로 길이) * 2 == 전체 둘레 + 4 (맨 끝 격자 4개가 겹치기 때문에)
  
4. 위 조건을 모두 만족하는 i가 있다면 반환한다.

"""
